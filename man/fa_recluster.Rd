% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recluster_analyses.R
\name{fa_recluster}
\alias{fa_recluster}
\title{Recluster two pre-clustered populations}
\usage{
fa_recluster(faDF1_cluster = NULL, faDF2_cluster = NULL, led_threshold = 7)
}
\arguments{
\item{faDF1_cluster}{A clustered FASTAptameR data.frame}

\item{faDF2_cluster}{A clustered FASTAptameR data.frame}

\item{led_threshold}{The maximum Levenshtein edit distance (LED) between a seed sequence and a new sequence (default: 7)}
}
\value{
A data.frame with reclustered sequences
}
\description{
\code{fa_recluster} merges clustered sequences from one population into another one, generating super-clusters.
Consider the sets of seed sequences from two populations, A and B.
When a seed sequence in B is within a user-defined LED of a seed sequence in A, all sequences from the corresponding B cluster are added into the A cluster.
The seed sequence for these super-clusters corresponds to the sequence with the highest RPU. Thus, the same scaling factor should be used when RPU is calculated in \code{fa_count}.
The final, reclustered data.frame contains columns for sequence enrichment between populations, rank in cluster, and distance to cluster seed.
}
\examples{
\dontrun{
# count FASTQ files, cluster data, recluster populations together
countData <- list(
  fa_count(dataInput = "PATH/TO/FILE1.fastq"),
  fa_count(dataInput = "PATH/TO/FILE2.fastq")
)
clusterData <- list(
  fa_clusterLED(faDF = countData[[1]]),
  fa_clusterLED(faDF = countData[[2]])
)
reclusterData <- fa_recluster(
  faDF1_cluster = clusterData[[1]],
  faDF2_cluster = clusterData[[2]]
)
}

}
\seealso{
\code{\link[=fa_count]{fa_count()}}, \code{\link[=fa_clusterLED]{fa_clusterLED()}}, \code{\link[=fa_recluster_heatmap]{fa_recluster_heatmap()}}, \code{\link[=fa_recluster_popSize]{fa_recluster_popSize()}}, \code{\link[=fa_recluster_RPU]{fa_recluster_RPU()}}, \code{\link[=fa_recluster_LED]{fa_recluster_LED()}}, \code{\link[=fa_recluster_enrich]{fa_recluster_enrich()}}
}
