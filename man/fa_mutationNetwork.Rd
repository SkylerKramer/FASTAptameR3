% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mutationNetwork_analyses.R
\name{fa_mutationNetwork}
\alias{fa_mutationNetwork}
\title{Find the shortest path between two sequences if a path exists under the given constraints}
\usage{
fa_mutationNetwork(faDF = NULL, startNode = NULL, endNode = NULL, maxCost = 1)
}
\arguments{
\item{faDF}{A FASTAptameR data.frame}

\item{startNode}{The start node is the first sequence in the path of the mutation network}

\item{endNode}{The end node is the final sequence in the path of the mutation network}

\item{maxCost}{This is the maximum Levenshtein edit distance (LED) allowed between any two connected sequences (default: 1)}
}
\value{
A data.frame with the each step of the mutation network if a path exists between the start and end nodes
}
\description{
\code{fa_mutationNetwork} uses Dijkstra's shortest path algorithm and LEDs between sequences to find the shortest mutational path between two input sequences (if it exists).
}
\examples{
\dontrun{
# count FASTQ file
countData <- fa_count(dataInput = "PATH/TO/FILE.fastq")

# find shortest path between most abundant sequence and a user-defined query sequence
pathData <- fa_mutationNetwork(
  faDF = countData,
  startNode = countData$Sequences[1],
  endNode = querySequence,
  maxCost = 3
)
}

}
\seealso{
\code{\link[=fa_count]{fa_count()}}
}
