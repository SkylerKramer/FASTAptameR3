% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recluster_plots.R
\name{fa_recluster_heatmap}
\alias{fa_recluster_heatmap}
\title{Return a heat map of the Levenshtein edit distances (LEDs) between cluster seeds}
\usage{
fa_recluster_heatmap(
  faDF1_cluster = NULL,
  faDF2_cluster = NULL,
  xaxis = "Population 1 clusters",
  yaxis = "Population 2 clusters",
  legend_title = "LED",
  plot_title = "LED between cluster seeds",
  fill_palette_cont = "magma"
)
}
\arguments{
\item{faDF1_cluster}{A clustered FASTAptameR data.frame}

\item{faDF2_cluster}{A clustered FASTAptameR data.frame}

\item{xaxis}{The title of the x-axis (default: "Population 1 clusters")}

\item{yaxis}{The title of the y-axis (default: "Population 2 clusters")}

\item{legend_title}{The title of the legend (default: "LED")}

\item{plot_title}{The title of the plot (default: "LED between cluster seeds")}

\item{fill_palette_cont}{A continuous color palette (default: "magma")}
}
\value{
A plotly object with a heat map showing the LED between cluster seeds in two populations
}
\description{
\code{fa_recluster_heatmap} returns a heat map in which the x- and y-axes correspond to cluster seeds from their respective populations, and the color corresponds to the LED between seeds.
This visualization can indicate an appropriate LED for \code{fa_recluster()}.
}
\examples{
\dontrun{
# count FASTQ files, cluster data
countData <- list(
  fa_count(dataInput = "PATH/TO/FILE1.fastq"),
  fa_count(dataInput = "PATH/TO/FILE2.fastq")
)
clusterData <- list(
  fa_clusterLED(faDF = countData[[1]]),
  fa_clusterLED(faDF = countData[[2]])
)

# generate heatmap before reclustering
fa_recluster_heatmap(faDF1_cluster = clusterData[[1]], faDF2_cluster = clusterData[[2]])
}

}
\seealso{
\code{\link[ggplot2:scale_viridis]{ggplot2::scale_fill_viridis_c()}}, \code{\link[=fa_clusterLED]{fa_clusterLED()}}, \code{\link[=fa_recluster]{fa_recluster()}}
}
